# --- logging ---

DEBUG=
# Available scopes: auth:hasura-auth-hook,auth:next-auth

HASURA_GRAPHQL_ENABLED_LOG_TYPES=startup
# Available scopes: startup,query-log,http-log,webhook-log,websocket-log
# Default is "startup,http-log,webhook-log,websocket-log"

# --- /logging ---

PORT=3000

HASURA_GRAPHQL_DATABASE_URL=postgres://postgres:postgrespassword@host.docker.internal:5432/postgres
# Note: The above matches the configuration of the "db" package script

# Set to "true" if your db server uses SSL but certs are unavailable (e.g. heroku)
NODE_PG_SSL_NO_VERIFY=false

HASURA_GRAPHQL_ADMIN_SECRET=admin_secret

NEXTAUTH_URL=http://localhost:3000

AUTH_JWT_SECRET=jwt_secret

# Google Client keys for authentication
GOOGLE_CLIENT_ID=914808709197-ipthdb4bba3htdrv7q8b9vn6460eklo5.apps.googleusercontent.com
GOOGLE_CLIENT_SECRET=bn1ro4mKEy-Aix3gV7DQqNQP
# These keys will work in development.
# To get your own keys for production:
# 1. Go to https://console.cloud.google.com/
# 2. Create a project
# 3. Go to https://console.developers.google.com/apis/credentials
# 4. Click "CREATE CREDENTIALS" > "OAuth client ID"
#   - For "Application type" select "Web application"
#   - For "Name" make up a name
#   - For "Authorized JavaScript origins" enter "https://my-app-domain.com"
#   - For "Authorized redirect URIs" enter "https://my-app-domain.com/api/auth/callback/google"
#   - Click "Create"
# 5. Click "OAuth Consent Screen" from left-hand menu
#   - For User Type select "External"
#   - Click "Create"
#   - Complete form
#   - Set "Publishing status" from "Testing" to "In production"
